<html>
<head>
  <title>Data Center</title>

  <style>
    body {
      color: #d3d3d3;
      font: 12pt arial;
      background-color: #000000;
      margin: 0;
      height: 100%;
      overflow: hidden;
    }

    #mynetwork {
      width: 100%;
      height: 1000px;
      border: 1px solid #444444;
      background-color: #222222;
    }
  </style>
  <script type='text/javascript' src="/js/vis.js"></script>
  <script type='text/javascript' src="/dependencies/sails.io.js"></script>
</head>

<body>
<table width="100%" height="1000px">
  <tr>
    <td height="90%">
      <table>
        <tr>
          <td>Connected Cars</td>
          <td><input type="text" id="vehicle-population"/></td>
          <td>Packet Size</td>
          <td><input type="text" id="vehicle-packetSize"/></td>
          <td>Accidents</td>
          <td><input type="text" id="vehicle-accidents"/></td>
          <td>
            <button onclick="updateVehicle();">Update</button>
          </td>
        </tr>
      </table>
    </td>
    <td width="220px"></td>
  </tr>
  <tr>
    <td>
      <div id="mynetwork">
        <div class="vis-network" tabindex="900"
             style="position: relative; overflow: hidden; touch-action: pan-y; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 100%;">
          <canvas width="1000" height="1600"
                  style="position: relative; touch-action: none; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 1000px;"></canvas>
        </div>
      </div>
    </td>
    <td valign="top" width="220px">
      <table id="events" width="210px">
        <tr>
          <td colspan="2"><h4>Events</h4></td>
        </tr>
      </table>

      <table id="triggers" width="210px">
        <tr>
          <td colspan="2"><h4>Policies</h4></td>
        </tr>
      </table>
    </td>
  </tr>
  <tr>
    <td>
      <table>
        <tr>
          <td>Hardware</td>
          <td id="hardwareMetric">-</td>
          <td>Resources</td>
          <td id="resourceMetric">-</td>
          <td>Instances</td>
          <td id="instanceMetric">-</td>
          <td>Services</td>
          <td id="serviceMetric">-</td>
          <td>Apps</td>
          <td id="appMetric">-</td>
        </tr>
      </table>
    </td>
  </tr>
</table>

<a href="/dc/initialize">Reset Simulation</a>

<button onclick="changeLayout();">Change Layout</button>
<button onclick="addApp('Basic');">Basic Annotation</button>
<button onclick="addApp('Alert');">Alert System</button>
<button onclick="addApp('External');">External Application</button>
<button onclick="addApp('Analytics');">Analytics</button>
<button onclick="addApp('DeepLearning');">Deep Learning</button>
<button onclick="network.fit();">Zoom All</button>

<script type="text/javascript">
  //////////////////////////////////////////////
  // Initialize
  let showInstances = true;
  let triggerMap = {};
  let edgesMap = {};
  let nodesMap = {};
  let nodes;
  let edges;
  let network;
  let options;

  function initGraph() {
    showInstances = true;
    triggerMap = {};
    edgesMap = {};
    nodesMap = {};
    nodes = new vis.DataSet([]);
    edges = new vis.DataSet([]);
    // create a network
    let container = document.getElementById('mynetwork');
    let data = {
      nodes: nodes,
      edges: edges
    };
    options = {
      layout: {
      //  hierarchical: {
      //    enabled: true,
      //    sortMethod: 'directed'
      //  }
      },
      nodes: {
        shape: 'dot',
        size: 20,
        font: {
          size: 15,
          color: '#ffffff'
        },
        borderWidth: 2,
        // level: 15
      },
      groups: {
        App: {
          color: {background: '#aa6622', border: '#aa6622'},
          shape: 'triangle',
          // level: 1,
        },
        Service: {
          color: {background: '#ff8844', border: '#ff8844'},
          shape: 'diamond',
          // level: 2,
        },
        Instance: {
          shape: 'diamond',
          color: {background: '#ffaa88', border: '#ffaa88'},
          // level: 5,
        }
      }
    };
    network = new vis.Network(container, data, options);
    network.on('stabilized', function (params) {
      network.fit({animation: true});
    });
    network.on('selectNode', function (params) {
      let retval = getAllNodes(params.nodes, null);
      network.setSelection(retval, {unselectAll: true, highlightEdges: false});
    });
  }

  function changeLayout() {
    if (options.layout.hierarchical) {
      options.layout.hierarchical = false;
      options.physics = {
        hierarchicalRepulsion: {
          centralGravity: 0.0,
          springLength: 100,
          springConstant: 0.01,
          nodeDistance: 200,
          damping: 0.09
        }
      }
    }
    else {
      options.layout = {
        hierarchical: {
          enabled: true,
          sortMethod: 'directed'
        }
      };
    }
    network.destroy();
    let container = document.getElementById('mynetwork');
    nodes.clear();
    nodes = new vis.DataSet([]);
    edges.clear();
    edges = new vis.DataSet([]);
    let newData = {
      nodes: nodes,
      edges: edges
    };
    network = new vis.Network(container, newData, options);
    network.on('selectNode', function (params) {
      let retval = getAllNodes(params.nodes, null);
      network.setSelection(retval, {unselectAll: true, highlightEdges: false});
    });
    network.on('stabilized', function (params) {
      network.fit({animation: true});
    });
    let onodes = [];
    for (let id in nodesMap) {
      if (nodesMap[id].node) {
        onodes.push(nodesMap[id].node);
      }
      else {
        delete nodesMap[id];
      }
    }
    nodes.update(onodes);
    drawEdges({force: true});
  }

  function addApp(app) {
    io.socket.get('/app/create?mode=json&name=' + app, function (body, response) {
    });
  }


  function updateVehicle() {
    let population = document.getElementById('vehicle-population');
    let packetSize = document.getElementById('vehicle-packetSize');
    let accidents = document.getElementById('vehicle-accidents');
    let url = '/vehicle/update?mode=json';
    url += "&population=" + population.value;
    url += "&packetSize=" + packetSize.value;
    url += "&accidents=" + accidents.value;
    io.socket.get(url, function (body, response) {
    });
  }

  function getAllNodes(nodes, direction) {
    if (!direction) {
      let retval = {nodes: nodes, edges: []};
      let selection = getAllNodes(nodes, 'to');
      retval.nodes = retval.nodes.concat(selection.nodes);
      retval.edges = retval.edges.concat(selection.edges);

      selection = getAllNodes(nodes, 'from');
      retval.nodes = retval.nodes.concat(selection.nodes);
      retval.edges = retval.edges.concat(selection.edges);
      return retval;
    }
    else {
      let retval = {nodes: nodes, edges: []};
      for (let i = 0; i < nodes.length; i++) {
        if (nodesMap.hasOwnProperty(nodes[i])) {
          let nnodes = nodesMap[nodes[i]][direction];
          let selection = getAllNodes(nnodes, direction);
          retval.nodes = retval.nodes.concat(selection.nodes);
          retval.edges = retval.edges.concat(selection.edges);
          for (let j = 0; j < nnodes.length; j++) {
            if (direction === 'to') {
              retval.edges.push(nodes[i] + '-' + nnodes[j]);
            }
            else {
              retval.edges.push(nnodes[j] + '-' + nodes[i]);
            }
          }
        }
      }
      return retval;
    }
  }

  function addEvent(event) {
    let table = document.getElementById('events');

    // try and find the row first
    let row = document.getElementById('events-' + event.id);
    let cell1;
    let cell2;
    if (!row) {
      row = table.insertRow(1);
      row.id = "events-" + event.id;
      cell1 = row.insertCell(0);
      cell1.width = "100px";
      cell2 = row.insertCell(1);
      cell2.width = "100px";
    }
    else {
      cell1 = row.cells[0];
      cell2 = row.cells[1];
    }
    cell1.innerHTML = event.name;
    cell2.innerHTML = event.value;
    cell2.bgColor = '#000055';
    setTimeout(function () {
      cell2.bgColor = 'black';
    }, 1000);
    let eventsT = document.getElementsByClassName('Tevents-' + event.id);
    for (let i = 0; i < eventsT.length; i++) {
      eventsT[i].bgColor = '#000055';
      eventsT[i].innerHTML = event.value;
      setTimeout(function () {
        eventsT[i].bgColor = 'black';
        eventsT[i].innerHTML = event.name;
      }, 1000);
      // Set timer to change back in 1 second.
    }
    let condT = document.getElementsByClassName('Tcond-' + event.id);
    for (let i = 0; i < condT.length; i++) {
      let prevColor = condT[i].bgColor;
      condT[i].innerHTML = event.value;
    }
  }

  function drawTriggers() {
    let table = document.getElementById('triggers');
    for (let event in triggerMap) {
      let total = 0
      let fired = 0;
      let eventID = 0;
      let row = document.getElementById('trigger-' + event);
      for (let name in triggerMap[event]) {
        let trigger = triggerMap[event][name];
        eventID = trigger.event.id;
        if (trigger.fired) {
          fired++;
        }
        total++;
      }
      if (!row) {
        row = table.insertRow(1);
        row.id = 'trigger-' + event;
        let cell1 = row.insertCell(0);
        cell1.width = "100px";
        let cell2 = row.insertCell(1);
        cell2.width = "100px";
        cell1.innerHTML = event;
        cell1.className = 'Tevents-' + eventID;
        cell2.innerHTML = fired + '/' + total;
        cell2.id = 'triggerValue-' + event;
      }
    }
  }

  function addTrigger(trigger) {
    if (!triggerMap.hasOwnProperty(trigger.event.name)) {
      triggerMap[trigger.event.name] = {};
    }
    triggerMap[trigger.event.name][trigger.name] = trigger;
  }

  function triggered(trigger) {
    let row = document.getElementById('trigger-' + trigger.event.name);
    let cell = document.getElementById('triggerValue-' + trigger.event.name);
    row.bgColor = "darkgreen";
    cell.innerHTML = trigger.condition.replace('events.value', trigger.event.value);
    setTimeout(function () {
      if (trigger.fired) {
        cell.bgColor = '#000088';
      }
      else {
        cell.bgColor = 'black';
      }
    }, 3000);
  }

  function addNode(lnodes) {
    let mnodes = [];
    for (let i = 0; i < lnodes.length; i++) {
      let node = lnodes[i];
      if (!nodesMap.hasOwnProperty(node.id)) {
        nodesMap[node.id] = {node: node, to: [], from: []};
      }
      else {
        nodesMap[node.id].node = node;
      }
      mnodes.push(node);
    }
    nodes.update(mnodes);
  }

  function removeNode(id) {
    if (nodesMap.hasOwnProperty(id)) {
      let dnode = nodesMap[id];
      // Need to delete edges associated
      // Find the id in the edgesMap
      for (let i = 0; i < dnode.from.length; i++) {
        let eid = dnode.from[i] + '-' + dnode.node.id;
        if (edgesMap.hasOwnProperty(eid)) {
          delete edgesMap[eid];
        }
        let newNodes = [];
        for (let j = 0; j < nodesMap[dnode.from[i]].to.length; j++) {
          if (nodesMap[dnode.from[i]].to[j] != id) {
            newNodes.push(nodesMap[dnode.from[i]].to[j]);
          }
        }
        nodesMap[dnode.from[i]].to = newNodes;
      }
      for (let i = 0; i < dnode.to.length; i++) {
        let eid = dnode.node.id + '-' + dnode.to[i];
        if (edgesMap.hasOwnProperty(eid)) {
          delete edgesMap[eid];
        }
        let newNodes = [];
        for (let j = 0; j < nodesMap[dnode.to[i]].from.length; j++) {
          if (nodesMap[dnode.to[i]].from[j] != id) {
            newNodes.push(nodesMap[dnode.from[i]].to[j]);
          }
        }
        nodesMap[dnode.to[i]].from = newNodes;
      }
      delete nodesMap[id];
    }
    nodes.remove(id);
  }

  function addEdge(edge) {
    let id = edge.from + '-' + edge.to;
    edge.id = id;
    if (!edgesMap.hasOwnProperty(id)) {
      edge.updated = true;
      edge.value = 1;
      edgesMap[id] = edge;
    }
    else {
      edgesMap[id].updated = true;
      edgesMap[id].value++;
    }
    if (!nodesMap.hasOwnProperty(edge.from)) {
      nodesMap[edge.from] = {from: [], to: []};
    }
    nodesMap[edge.from].to.push(edge.to);
    if (!nodesMap.hasOwnProperty(edge.to)) {
      nodesMap[edge.to] = {from: [], to: []};
    }
    nodesMap[edge.to].from.push(edge.from);
  }

  function removeEdge(from, to) {
    let id = edge.from + '-' + edge.to;
    if (edgesMap.hasOwnProperty(id)) {
      delete edgesMap[id];
    }
  }

  function drawEdges(opts) {
    let items = [];
    if (!opts) {
      opts = {force: false};
    }
    for (let id in edgesMap) {
      if (opts.force || edgesMap[id].updated) {
        let edge = edgesMap[id];
        edge.width = edge.value;
        edge.color = {color: 'gray', highlight: 'blue'};
        edge.highlight = "blue";
        delete edge.value;
        delete edge.updated;
        items.push(edge);
        edgesMap[id].updated = false;
      }
    }
    edges.update(items);
    // network.fit();
  }


  function getMetrics() {
    io.socket.get('/dc/metrics?mode=json', function (body, response) {
      let metric = document.getElementById('hardwareMetric');
      let header = "";
      let content = "";
      for (let type in body.hardware) {
        let hw = body.hardware[type];
        header += '<td>' + type + '</td>';
        content += '<td>' + hw.total + "(" + Math.round(100 - (100 * hw.available / hw.capacity)) + "%)</td>";
      }
      metric.innerHTML = '<table><tr>' + header + '</tr><tr>' + content + '</tr></table>';

      // Resource Metrics
      metric = document.getElementById('resourceMetric');
      header = "";
      content = "";
      for (let type in body.resources) {
        let re = body.resources[type];
        header += '<td>' + type + '</td>';
        content += '<td>' + re.total + "(" + Math.round(100 - (100 * re.available / re.capacity)) + "%)</td>";
      }
      metric.innerHTML = '<table><tr>' + header + '</tr><tr>' + content + '</tr></table>';

      metric = document.getElementById('appMetric');
      metric.innerHTML = body.apps;

      metric = document.getElementById('instanceMetric');
      metric.innerHTML = body.instances;

      metric = document.getElementById('serviceMetric');
      metric.innerHTML = body.services;
    });
  }

  //////////////////////////////////////////////////////
  // VEHICLE
  function getVehicle() {
    io.socket.get('/vehicle/list?mode=json', function (body, response) {
      if (body.length) {
        let population = document.getElementById('vehicle-population');
        population.value = body[0].population;
        let packetSize = document.getElementById('vehicle-packetSize');
        packetSize.value = body[0].packetSize;
        let acc = document.getElementById('vehicle-accidents');
        acc.value = body[0].accidents;
      }
    });
    io.socket.on('vehicle', function (obj) {
      let population = document.getElementById('vehicle-population');
      population.innerHTML = obj.population;
      let packetSize = document.getElementById('vehicle-packetSize');
      packetSize.innerHTML = obj.packetSize;
      let acc = document.getElementById('vehicle-accidents');
      acc.innerHTML = obj.accidents;
    });
    getMetrics();
  }

  //////////////////////////////////////////////////////////
  // EVDNTS
  function getEvents() {
    io.socket.get('/events/list?mode=json', function (body, response) {
      for (let i = 0; i < body.length; i++) {
        let obj = body[i];
        addEvent(obj);
      }
    });
    io.socket.on('events', function (obj) {
      addEvent(obj);
    });
  }

  //////////////////////////////////////////////////////////
  // TRIGGERS
  function getTriggers() {
    io.socket.get('/trigger/list?mode=json', function (body, response) {
      for (let i = 0; i < body.length; i++) {
        let obj = body[i];
        addTrigger(obj);
      }
      drawTriggers();
    });
    io.socket.on('trigger', function (obj) {
      addTrigger(obj);
      drawTriggers();
    });
    io.socket.on('triggered', function (obj) {
      triggered(obj);
    });
    getMetrics();
  }

  ///////////////////////////////////////////////
  // SERVICES
  function getServices() {
    io.socket.get('/service/list?mode=json', function (body, response) {
      let items = [];
      let es = [];

      for (let i = 0; i < body.length; i++) {
        let obj = body[i];
        let item = {
          id: 's' + obj.id,
          label: obj.name,
          group: 'Service',
          size: obj.instances.length + 15,
          title: obj.name + ' (' + obj.instances.length + ')'
        };
        items.push(item);
        for (let j = 0; j < obj.apps.length; j++) {
          let app = obj.apps[j];
          addEdge({to: 's' + obj.id, from: 'a' + app.id, length: 10});
        }
        for (let j = 0; j < obj.links.length; j++) {
          let link = obj.links[j];
          addEdge({from: 's' + obj.id, to: 's' + link.id});
        }
      }
      addNode(items);
      drawEdges();
    });
    io.socket.on('service', function (obj) {
      let item = {
        id: 's' + obj.id,
        label: obj.name,
        group: 'Service',
        size: obj.instances.length + 15,
        title: obj.name + ' (' + obj.instances.length + ')'
      };
      addNode([item]);
      for (let j = 0; j < obj.apps.length; j++) {
        let app = obj.apps[j];
        addEdge({to: 's' + obj.id, from: 'a' + app.id});
      }
      for (let j = 0; j < obj.links.length; j++) {
        let link = obj.links[j];
        addEdge({from: 's' + obj.id, to: 's' + link.id});
      }
      drawEdges();
      getMetrics();
    });
  }

  ///////////////////////////////////////////////
  // APPS
  function getApps() {
    io.socket.get('/app/list?mode=json', function (body, response) {
      let items = [];
      for (let i = 0; i < body.length; i++) {
        let obj = body[i];
        let item = {id: 'a' + obj.id, label: obj.name, group: 'App', title: obj.name + '(' + obj.services.length + ')'};
        items.push(item);
      }
      addNode(items);
    });
    io.socket.on('app', function (obj) {
      let item = null;
      if (obj.services) {
        item = {id: 'a' + obj.id, label: obj.name, group: 'App', title: obj.name + '(' + obj.services.length + ')'};
      }
      else {
        item = {id: 'a' + obj.id, label: obj.name, group: 'App', title: obj.name};
      }
      addNode([item]);
      getMetrics();
    });
  }

  ///////////////////////////////////////////////
  // INSTANCES
  function getInstances() {
    io.socket.get('/instance/list?mode=json', function (body, response) {
      let items = [];
      for (let i = 0; i < body.length; i++) {
        let obj = body[i];
        let item = {id: 'i' + obj.id, label: obj.id, group: 'Instance', title: obj.name};
        items.push(item);
        addEdge({from: 's' + obj.service.id, to: 'i' + obj.id, length: 1});
      }
      addNode(items);
      drawEdges();
    });
    io.socket.on('instance', function (body) {
      let items = [];
      for (let i = 0; i < body.length; i++) {
        let obj = body[i];
        let item = {id: 'i' + obj.id, label: obj.id, group: 'Instance', title: obj.name};
        items.push(item);
        addEdge({from: 's' + obj.service.id, to: 'i' + obj.id, length: 1});
      }
      addNode(items);
      drawEdges();
    });
    io.socket.on('instance-destroy', function (body) {
      for (let i = 0; i < body.length; i++) {
        removeNode('i' + body[i].id);
      }
      getMetrics();
    });

    network.fit({animation: true});
  }

  function init() {
    initGraph();
    getVehicle();
    getEvents();
    getTriggers();
    getApps();
    getServices();
    getInstances();
  }

  init();

</script>

</body>
</html>
